#!/bin/bash
set -e
source swift-define

cat <<EOT > $CROSS_TOOLCHAIN_FILE
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_TARGET_ARCH})
set(CMAKE_SYSROOT ${STAGING_DIR})
set(CMAKE_Swift_COMPILER_TARGET ${SWIFT_TARGET_NAME})

find_program(BINUTILS_PATH ${SWIFT_TARGET_NAME_PREFIX}gcc NO_CACHE)

if (NOT BINUTILS_PATH)
    message(FATAL_ERROR "ARM GCC toolchain not found")
endif ()

# set compiler triple
set(CMAKE_ASM_COMPILER_TARGET ${SWIFT_TARGET_NAME})
set(CMAKE_C_COMPILER_TARGET ${SWIFT_TARGET_NAME})
set(CMAKE_CXX_COMPILER_TARGET ${SWIFT_TARGET_NAME})

set(CMAKE_C_FLAGS_INIT CACHE " -B${STAGING_DIR}/bin " FORCE)
set(CMAKE_CXX_FLAGS_INIT " -B${STAGING_DIR}/bin ")
# Without that flag CMake is not able to pass test compilation check
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

#set(CMAKE_OBJCOPY llvm-objcopy CACHE INTERNAL "objcopy tool")
#set(CMAKE_SIZE_UTIL llvm-size CACHE INTERNAL "size tool")
## Default C compiler flags
#set(CMAKE_C_FLAGS_DEBUG_INIT "-g3 -Og -Wall -pedantic -DDEBUG")
#set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG_INIT}" CACHE STRING "" FORCE)
#set(CMAKE_C_FLAGS_RELEASE_INIT "-O3 -Wall")
#set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE_INIT}" CACHE STRING "" FORCE)
#set(CMAKE_C_FLAGS_MINSIZEREL_INIT "-Oz -Wall")
#set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL_INIT}" CACHE STRING "" FORCE)
#set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "-O2 -g -Wall")
#set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}" CACHE STRING "" FORCE)
## Default C++ compiler flags
#set(TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG "")
#string(APPEND TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG " -cxx-isystem ${STAGING_DIR}/usr/include/c++/13.3.0")
#string(APPEND TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG " -cxx-isystem ${STAGING_DIR}/usr/include/c++/13.3.0/${SWIFT_TARGET_NAME}")
#string(APPEND TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG " -cxx-isystem ${STAGING_DIR}/usr/include/c++/13.3.0/backward")
#set(CMAKE_CXX_FLAGS_DEBUG_INIT "-g3 -Og -Wall -pedantic -DDEBUG ${TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG}")
#set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG_INIT}" CACHE STRING "" FORCE)
#set(CMAKE_CXX_FLAGS_RELEASE_INIT "-O3 -Wall ${TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG}")
#set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE_INIT}" CACHE STRING "" FORCE)
#set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "-Oz -Wall ${TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG}")
#set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL_INIT}" CACHE STRING "" FORCE)
#set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "-O2 -g -Wall ${TOOLCHAIN_CXX_INCLUDE_DIRS_FLAG}")
#set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT}" CACHE STRING "" FORCE)

set(CMAKE_FIND_ROOT_PATH ${STAGING_DIR})
#set(CMAKE_FIND_ROOT_PATH ${STAGING_DIR}/usr/bin)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
EOT
