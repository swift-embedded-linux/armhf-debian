# Version
SWIFT_VERSION=${SWIFT_VERSION:=swift-6.1-RELEASE}
#SWIFT_TARGET_ARCH=${SWIFT_TARGET_ARCH:=armv7}

case ${SWIFT_TARGET_ARCH} in
    armv6)
        CMAKE_TARGET_ARCH="armv6l"
        DEBIAN_TARGET_ARCH=armhf
        # The only version of armv6 supported is the RPI ARM1176JZF-S, which is only supported by Raspbian
        # If you attempt to build for armv6 with a Ubuntu or Debian sysroot, binaries will fail to run!!!
        EXTRA_FLAGS="-march=armv6 -mfpu=vfp -mfloat-abi=hard"
        SWIFT_TARGET_NAME=${SWIFT_TARGET_ARCH}-unknown-linux-gnueabihf
        ;;
    armv7)
        CMAKE_TARGET_ARCH="armv7-a"
        DEBIAN_TARGET_ARCH=armhf
        EXTRA_FLAGS="-march=${CMAKE_TARGET_ARCH} -mfpu=neon -mfloat-abi=hard"
        SWIFT_TARGET_NAME=${SWIFT_TARGET_ARCH}-unknown-linux-gnueabihf
        ;;
    aarch64)
        CMAKE_TARGET_ARCH="aarch64"
        DEBIAN_TARGET_ARCH=arm64
        SWIFT_TARGET_NAME=${SWIFT_TARGET_ARCH}-poky-linux
        SWIFT_TARGET_NAME_PREFIX=${SWIFT_TARGET_ARCH}-poky-linux-
        ;;
    *)
        echo "Unsupported architecture $SWIFT_TARGET_ARCH!"
        exit -1
        ;;
esac

if [ $STATIC_SWIFT_STDLIB ]; then
    STATIC_SUFFIX="-static"
fi

# Configurable
SRC_ROOT="${SRC_ROOT:=$(pwd)}"
XCTOOLCHAIN="${XCTOOLCHAIN:=$SRC_ROOT/build/$SWIFT_VERSION-armv7-debian12.xctoolchain}"
XCTOOLCHAIN_SDK="${XCTOOLCHAIN_SDK:=/tmp/cross-toolchain/debian-bookworm.sdk}"
STAGING_DIR="${STAGING_DIR:=$SRC_ROOT/sysroot-imx8}"
if [[ $OSTYPE == 'darwin'* ]]; then
    SWIFT_NATIVE_PATH="${SWIFT_NATIVE_PATH:=$XCTOOLCHAIN/usr/bin}"
else
    SWIFT_NATIVE_PATH="${SWIFT_NATIVE_PATH:=/usr/bin}"
fi
SWIFT_BUILD_CONFIGURATION="${SWIFT_BUILD_CONFIGURATION:=Release}"
SWIFTPM_CONFIGURATION="${SWIFTPM_CONFIGURATION:=release}"
SWIFT_PACKAGE_SRCDIR="${SWIFT_PACKAGE_SRCDIR:=$SRC_ROOT/swift-hello}"
SWIFT_PACKAGE_BUILDDIR="${SWIFT_PACKAGE_BUILDDIR:=$SWIFT_PACKAGE_SRCDIR/.build}"
CROSS_TOOLCHAIN_FILE="${CROSS_TOOLCHAIN_FILE:=$SRC_ROOT/build/build-toolchain-${SWIFT_TARGET_ARCH}.cmake}"
if [ -d ${STAGING_DIR} ]; then
    GCC_INSTALL_DIR=$(dirname $(find ${STAGING_DIR} -name crtbegin.o))
else
    GCC_INSTALL_DIR=${STAGING_DIR}
fi

# Build Paths
LLVM_SRCDIR=$SRC_ROOT/downloads/llvm-project
LLVM_BUILDDIR=$SRC_ROOT/build/llvm-linux-$SWIFT_TARGET_ARCH
SWIFT_SRCDIR=$SRC_ROOT/downloads/swift
SWIFT_BUILDDIR=$SRC_ROOT/build/swift-linux-$SWIFT_TARGET_ARCH
SWIFT_INSTALL_PREFIX=$SRC_ROOT/build/swift-linux-$SWIFT_TARGET_ARCH-install
SYNTAX_SRCDIR=$SRC_ROOT/downloads/swift-syntax
STRING_PROCESSING_SRCDIR=$SRC_ROOT/downloads/swift-experimental-string-processing
LIBDISPATCH_SRCDIR=$SRC_ROOT/downloads/swift-corelibs-libdispatch
LIBDISPATCH_BUILDDIR=$SRC_ROOT/build/libdispatch-linux-$SWIFT_TARGET_ARCH
LIBDISPATCH_INSTALL_PREFIX=$SRC_ROOT/build/libdispatch-linux-$SWIFT_TARGET_ARCH-install
LIBDISPATCH_STATIC_BUILDDIR=$SRC_ROOT/build/libdispatch-linux-$SWIFT_TARGET_ARCH-static
LIBDISPATCH_STATIC_INSTALL_PREFIX=$SRC_ROOT/build/libdispatch-linux-$SWIFT_TARGET_ARCH-static-install
FOUNDATION_SRCDIR=$SRC_ROOT/downloads/swift-corelibs-foundation
FOUNDATION_BUILDDIR=$SRC_ROOT/build/foundation-linux-$SWIFT_TARGET_ARCH
FOUNDATION_INSTALL_PREFIX=$SRC_ROOT/build/foundation-linux-$SWIFT_TARGET_ARCH-install
FOUNDATION_STATIC_BUILDDIR=$SRC_ROOT/build/foundation-linux-$SWIFT_TARGET_ARCH-static
FOUNDATION_STATIC_INSTALL_PREFIX=$SRC_ROOT/build/foundation-linux-$SWIFT_TARGET_ARCH-static-install
XCTEST_SRCDIR=$SRC_ROOT/downloads/swift-corelibs-xctest
XCTEST_BUILDDIR=$SRC_ROOT/build/xctest-linux-$SWIFT_TARGET_ARCH
XCTEST_INSTALL_PREFIX=$SRC_ROOT/build/xctest-linux-$SWIFT_TARGET_ARCH-install
XCTEST_STATIC_BUILDDIR=$SRC_ROOT/build/xctest-linux-$SWIFT_TARGET_ARCH-static
XCTEST_STATIC_INSTALL_PREFIX=$SRC_ROOT/build/xctest-linux-$SWIFT_TARGET_ARCH-static-install
SWIFT_TESTING_SRCDIR=$SRC_ROOT/downloads/swift-testing
SWIFT_TESTING_BUILDDIR=$SRC_ROOT/build/swift-testing-linux-$SWIFT_TARGET_ARCH
SWIFT_TESTING_INSTALL_PREFIX=$SRC_ROOT/build/swift-testing-linux-$SWIFT_TARGET_ARCH-install
SWIFTPM_DESTINATION_FILE=${SWIFTPM_DESTINATION_FILE:=$SRC_ROOT/build/$SWIFT_TARGET_NAME-toolchain$STATIC_SUFFIX.json}
INSTALL_PREFIX=$SRC_ROOT/build/swift-install/usr
INSTALL_TAR=${INSTALL_TAR:=$SRC_ROOT/build/$SWIFT_VERSION-$SWIFT_TARGET_ARCH.tar.gz}
PREBUILT_XCTOOLCHAIN=$SRC_ROOT/downloads/${SWIFT_VERSION}-osx.pkg

EXTRA_YOCTO_FLAGS="-I${STAGING_DIR}/usr/include/c++/13.3.0  -I${STAGING_DIR}/usr/include/c++/13.3.0/${SWIFT_TARGET_NAME}"

# Compilation flags
RUNTIME_FLAGS="-w -fuse-ld=lld --sysroot=${STAGING_DIR} --gcc-install-dir=${GCC_INSTALL_DIR}  -target ${SWIFT_TARGET_NAME} ${EXTRA_FLAGS} ${EXTRA_YOCTO_FLAGS}"
LINK_FLAGS="--sysroot=${STAGING_DIR} --gcc-install-dir=${GCC_INSTALL_DIR} -target ${SWIFT_TARGET_NAME} ${EXTRA_FLAGS} ${EXTRA_YOCTO_FLAGS}"
ASM_FLAGS="--sysroot=${STAGING_DIR} -target ${SWIFT_TARGET_NAME} ${EXTRA_YOCTO_FLAGS}"

SWIFTC_FLAGS="-target ${SWIFT_TARGET_NAME} ${EXTRA_YOCTO_FLAGS} \
-use-ld=lld \
-sdk ${STAGING_DIR} \
-resource-dir ${SWIFT_BUILDDIR}/lib/swift \ 
"
