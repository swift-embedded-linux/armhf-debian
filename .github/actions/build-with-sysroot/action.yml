name: Build Swift with a provided sysroot and for a target architecture
description: This contains the functionality to build/restore a sysroot, build Swift, and build an SDK
inputs:
  swift-tag:
    description: The Swift tag version that is being built
    required: true
  sysroot-name:
    description: The name of the sysroot to use to build Swift
    required: true
  swift-target-arch:
    description: The target architecture to build Swift for (e.g., armv6 or armv7)
    required: true
  distribution:
    description: The name of the distribution to build for
    required: true
  builder-tag:
    description: Tag of the swift-builder container to use to build Swift
    required: true
runs:
  using: "composite"
  steps:
  - name: Restore Sysroot
    id: restore-sysroot
    uses: actions/cache/restore@v4
    with:
      key: ${{ inputs.sysroot-name }}
      path: ${{ inputs.sysroot-name }}
  - if: ${{ steps.restore-sysroot.outputs.cache-hit != 'true' }}
    name: Build Sysroot
    shell: bash
    env:
      DISTRIBUTION: ${{ inputs.distribution }}
    run: ./build-sysroot.sh $(echo ${DISTRIBUTION/-/ }) ${{ inputs.sysroot-name }}
  - name: Compress
    shell: bash
    run: tar -czf ${{ inputs.sysroot-name }}.tar.gz ${{ inputs.sysroot-name }}
  - name: Cache Sysroot
    id: cache-sysroot
    if: steps.restore-sysroot.outputs.cache-hit != 'true'
    uses: actions/cache/save@v4
    with:
      key: ${{ inputs.sysroot-name }}
      path: ${{ inputs.sysroot-name }}
  - name: Start Swift Builder
    shell: bash
    run: |
      docker run -d --name swift-armv7-builder -v $HOME:$HOME \
        -e SWIFT_VERSION=${{ inputs.swift-tag }} \
        -e STAGING_DIR=$(pwd)/${{ inputs.sysroot-name }} \
        -e INSTALL_TAR=$(pwd)/${{ inputs.swift-tag }}-${{ inputs.distribution }}-${{ inputs.swift-target-arch }}-install.tar.gz \
        -e SWIFT_TARGET_ARCH=${{ inputs.swift-target-arch }} \
        xtremekforever/swift-builder:${{ inputs.builder-tag }} \
        tail -f /dev/null
  - name: Build Swift
    shell: bash
    run: docker exec --user runner --workdir ${{ github.workspace }} swift-armv7-builder ./build.sh
  - name: Build SDK for Linux
    shell: bash
    run: |
      INSTALLABLE_SDK_PACKAGE=$(pwd)/${{ inputs.swift-tag }}-${{ inputs.distribution }}-${{ inputs.swift-target-arch }}-sdk.tar.gz \
      SYSROOT=${{ inputs.sysroot-name }} \
      TARGET_ARCH=${{ inputs.swift-target-arch }} \
        ./build-linux-cross-sdk.sh ${{ inputs.swift-tag }} ${{ inputs.distribution }}
  - name: Test SDK for Linux
    shell: bash
    env:
      SDK_NAME: ${{ inputs.swift-tag }}-${{ inputs.distribution }}-${{ inputs.swift-target-arch }}
    run: |
      docker run --rm --user runner --workdir ${{ github.workspace }} -v $HOME:$HOME -v ${{ github.workspace }}/artifacts:/opt \
        xtremekforever/swift-builder:${{ inputs.builder-tag }} \
        swift build -c release \
          --package-path swift-hello \
          --destination /opt/${{ env.SDK_NAME }}/${{ inputs.distribution }}.json \
          -Xswiftc -cxx-interoperability-mode=default \
          -Xswiftc -enable-testing
      cp ${{ github.workspace }}/swift-hello/.build/release/swift-hello ${{ github.workspace }}/artifacts/swift-hello
  - name: Test Static SDK for Linux
    shell: bash
    env:
      SDK_NAME: ${{ inputs.swift-tag }}-${{ inputs.distribution }}-${{ inputs.swift-target-arch }}
    run: |
      docker run --rm --user runner --workdir ${{ github.workspace }} -v $HOME:$HOME -v ${{ github.workspace }}/artifacts:/opt \
        xtremekforever/swift-builder:${{ inputs.builder-tag }} \
        swift build -c release \
          --package-path swift-hello \
          --destination /opt/${{ env.SDK_NAME }}/${{ inputs.distribution }}-static.json \
          -Xswiftc -cxx-interoperability-mode=default \
          --static-swift-stdlib
      cp ${{ github.workspace }}/swift-hello/.build/release/swift-hello ${{ github.workspace }}/artifacts/swift-hello-static
  - uses: actions/upload-artifact@v4
    name: Publish
    with:
      name: ${{ inputs.swift-tag }}-${{ inputs.distribution }}-${{ inputs.swift-target-arch }}
      path: |
        ${{ inputs.sysroot-name }}.tar.gz
        ${{ inputs.swift-tag }}*-${{ inputs.swift-target-arch }}-install.tar.gz
        ${{ inputs.swift-tag }}*-${{ inputs.swift-target-arch }}-sdk.tar.gz
        artifacts/swift-hello*
