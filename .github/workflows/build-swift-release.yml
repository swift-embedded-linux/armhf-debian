name: Build Swift Release

on:
  push:
    branches: [ "release/6.2" ]

env:
  SWIFT_VERSION: "6.2"
  SWIFT_TAG: swift-6.2-RELEASE
  SWIFT_WORKSPACE_CACHE: swift-workspace

jobs:
  fetch-sources:
    name: Fetch Swift Sources
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/checkout-swift
      name: "Restore or Checkout ${{ env.SWIFT_VERSION }}"
      with:
        swift-tag: ${{ env.SWIFT_TAG }}
        swift-workspace-cache: ${{ env.SWIFT_WORKSPACE_CACHE }}

  build-for-distribution:
    strategy:
      fail-fast: false
      matrix:
        distribution: [
          "debian-bullseye",
          "debian-bookworm",
          "debian-trixie",
          "ubuntu-focal",
          "ubuntu-jammy",
          "ubuntu-noble"
        ]
    name: Build for armv7
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [fetch-sources]
    steps:
    - uses: actions/checkout@v4
    - name: Generate Builder Container
      shell: bash
      run: ./swift-builder/build-container.sh
    - uses: ./.github/actions/build-for-distribution
      name: "Build & Publish Swift ${{ env.SWIFT_VERSION }}"
      with:
        swift-tag: ${{ env.SWIFT_TAG }}
        swift-workspace-cache: ${{ env.SWIFT_WORKSPACE_CACHE }}
        swift-target-arch: armv7
        distribution: ${{ matrix.distribution }}
        builder-tag: ${{ env.SWIFT_VERSION }}
    - name: Update Release ${{ env.SWIFT_VERSION }}
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: Swift ${{ env.SWIFT_VERSION }} for armhf
        tag: ${{ env.SWIFT_VERSION }}
        commit: ${{ github.sha }}
        artifactErrorsFailBuild: true
        artifacts: "*.tar.gz"
        body: |
          Contains Swift 6.2.x built for various distributions ðŸŽ‰ The following modules are included for **armv6** / **armv7**:

          - Essential Modules: `Swift`, `Glibc`, `Dispatch`, `Concurrency`, `Synchronization`
          - Foundation: `Foundation`, `Essentials`, `Internalization`, `Networking`, `XML`, `Collections`
          - C++ Interop: `Cxx`, `CxxStdlib`
          - Testing: `XCTest`, `Testing`
          - Optional Modules: `BlocksRuntime`, `Distributed`, `Differentiation`, `Observation`, `StringProcessing`, `RegexBuilder`, `RegexParser`, `RemoteMirror`, `SwiftOnoneSupport`

          Also contains all the same modules for static linking with `--static-swift-stdlib`.

          See the [README](https://github.com/swift-embedded-linux/armhf-debian?tab=readme-ov-file#continuous-integration--artifacts) for more information on build artifacts.

  build-for-raspios:
    strategy:
      fail-fast: false
      matrix:
        distribution-version: [
          "bullseye",
          "bookworm",
          "trixie"
        ]
        swift-target-arch: ["armv6", "armv7"]
    name: Build for RaspiOS
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [fetch-sources]
    steps:
    - uses: actions/checkout@v4
    - name: Generate Builder Container
      shell: bash
      run: |
        source ./swift-builder/swift-builder-common
        ./swift-builder/build-container.sh
    - uses: ./.github/actions/build-for-distribution
      name: "Build & Publish Swift ${{ env.SWIFT_VERSION }}"
      with:
        swift-tag: ${{ env.SWIFT_TAG }}
        swift-workspace-cache: ${{ env.SWIFT_WORKSPACE_CACHE }}
        swift-target-arch: ${{ matrix.swift-target-arch }}
        distribution: raspios-${{ matrix.distribution-version }}
        builder-tag: ${{ env.SWIFT_VERSION }}
    - name: Update Release ${{ env.SWIFT_VERSION }}
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        name: Swift ${{ env.SWIFT_VERSION }} for armhf
        tag: ${{ env.SWIFT_VERSION }}
        commit: ${{ github.sha }}
        artifactErrorsFailBuild: false
        artifacts: "*.tar.gz"
        body: |
          Contains Swift 6.2.x built for various distributions ðŸŽ‰ The following modules are included for **armv6** / **armv7**:

          - Essential Modules: `Swift`, `Glibc`, `Dispatch`, `Concurrency`, `Synchronization`
          - Foundation: `Foundation`, `Essentials`, `Internalization`, `Networking`, `XML`, `Collections`
          - C++ Interop: `Cxx`, `CxxStdlib`
          - Testing: `XCTest`, `Testing`
          - Optional Modules: `BlocksRuntime`, `Distributed`, `Differentiation`, `Observation`, `StringProcessing`, `RegexBuilder`, `RegexParser`, `RemoteMirror`, `SwiftOnoneSupport`

          Also contains all the same modules for static linking with `--static-swift-stdlib`.

          See the [README](https://github.com/swift-embedded-linux/armhf-debian?tab=readme-ov-file#continuous-integration--artifacts) for more information on build artifacts.
